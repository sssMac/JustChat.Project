version: '3.4'

services:
  justchat.api:
    build: 
      context: JustChat.Project
      dockerfile: JustChat.API/Dockerfile
    ports:
      - "5225:80"
      - "5226:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - PostgreSQL__DefaultConnection=Host=postgre;Port=5432;Database=JustChat.DB;Username=postgres;Password=russiamedved

      - MongoDBSettings__Database=JustChat
      - MongoDBSettings__CollectionName=MetaFile
      - MongoDBSettings__Host=mongodb
      - MongoDBSettings__Port=27017

      - AWS__ServiceURL=http://minio:9000 
      - AWS__Password=minio_password
      - AWS__Secret=minio_user

      - RedisCacheSettings__ConnectionString=redis

    depends_on:
      - postgre
      - redis
      - minio
      - mongodb

  netflex.web:
    build:
      context: NetFlex-WebProject
      dockerfile: NetFlex.WEB/Dockerfile
    ports:
      - "5224:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgre-netflex;Port=5432;Database=NetFlex.DB;Username=postgres;Password=russiamedved
    depends_on:
      - postgre-netflex
    command: ["dotnet", "ef", "database update"]


  mongodb:
    image : mongo:4.4.6
    container_name: mongodb
    ports:
    - 27017:27017
    restart: unless-stopped

  postgre-netflex:
    image: postgres:14.1-alpine
    restart: always
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "russiamedved"
      POSTGRES_DB: "NetFlex.DB"
    ports:
      - '7001:5432'
    volumes:
      - postgre-netflex:/var/lib/postgresql/data
      - ./postgre-netflex/init.sql:/docker-entrypoint-initdb.d/create_tables.sql

  postgre:
    image: postgres:14.1-alpine
    restart: always
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "russiamedved"
      POSTGRES_DB: "JustChat.DB"
    ports:
      - '7000:5432'
    volumes: 
      - postgre:/var/lib/postgresql/data
      - ./postgre/init.sql:/docker-entrypoint-initdb.d/create_tables.sql

  ui:
    build: 
      context: JustChat.Project/justchat.web
      dockerfile: Dockerfile
    container_name: justchat_ui
    restart: on-failure
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - HOST=0.0.0.0
    depends_on:
      - justchat.api
    volumes:        
      - ./justchat.web/src:/ui/src
      - '/ui/node_modules'

  redis:
    image: redis
    container_name: redis
    restart: on-failure
    ports:
      - "6379:6379"
    environment:
      REDIS_REPLICATION_MODE: 'master'
      ALLOW_EMPTY_PASSWORD: 'yes'  
    volumes:
      - ./redis_volume:/data

  rabbitmq:
    image: rabbitmq:3.7-management
    ports:
      - "5672:5672"
      - "15672:15672"
    tty: true
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest

  mqconsumer:
    build:
      context: JustChat.Project
      dockerfile: JustChat.RabbitMQ/Dockerfile
    environment:
      - RabbitMQ__Hostname=rabbitmq
      - RabbitMQ__Port=5672
    ports:
      - "8001:80"
    restart: always
    depends_on:
      - rabbitmq

  minio:
    image: minio/minio
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio_user
      MINIO_ROOT_PASSWORD: minio_password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgre:
    driver: local
  postgre-netflex:
    driver: local
  rabbitmq:
    driver: local
  mongodb:
    driver: local
  redis:
    driver: local
  minio:
    driver: local